{
    var A = require('./ast');
}

/*
 * Entry
 */

Start
    = _ rules:(TopLevel)* {
        return A.rules(rules);
    }

/*
 * Helpers
 */

_
    = [ \t\r\n]*

non_zero_digit
    = [1-9]

digit
    = [0-9]

float
    = rhead:non_zero_digit rtail:digit* '.' ftail:digit+ {
        return head + rtail.join('') + '.' + ftail.join('');
    }

integer
    = head:non_zero_digit tail:digit* {
        return head + tail.join('');
    }

/*
 * Productions
 */

Rule
    = sel:Selector body:Block {
        return A.rule(sel, body);
    }

Selector
    = frags:Fragment+ {
        var result = [];
        for (var i = 0; i < frags.length; ++i) {
            result = result.concat(frags[i]);
        }
        return result;
    }

Fragment
    = co:Combinator _ ch:Chunk _ {
        return [co, ch];
    }
    / ch:Chunk _ {
        return [ch];
    }

Chunk
    = $ ( Element ID? Class* Attrib* Pseudo* )
    / $ ( ID Class* Attrib* Pseudo* )
    / $ ( Class+ Attrib* Pseudo* )
    / $ ( Attrib+ Pseudo* )
    / $ Pseudo+

Element
    = '*' {
        return '*';
    }
    / head:[a-zA-Z] tail:[a-zA-Z0-9-]* {
        return head + tail.join('');
    }

ID
    = '#' s:Symbol {
        return '#' + s;
    }

Class
    = '.' s:Symbol {
        return '.' + s;
    }

Combinator
    = '>'   { return '>'; }
    / '~'   { return '~'; }
    / '+'   { return '+'; }
    / '&'   { return '&'; }

Attrib
    = '[' _ name:AttributeName _ op:AttributeOperator _ value:AttributeValue _ ']' {
        return '[' + name + op + value + ']';
    }
    / '[' _ name:AttributeName _ ']' {
        return '[' + name + ']';
    }

AttributeName
    = Symbol

AttributeOperator
    = '='
    / '~='
    / '^='
    / '$='
    / '*='
    / '|='

AttributeValue
    = String

Pseudo
    = '::' p:DoublePseudo   { return '::' + p; }
    / ':' p:SinglePseudo    { return ':' + p; }

SinglePseudo
    = 'root'
    / 'nth-child(' _ n:NTerm _ ')'
    / 'nth-last-child(' _ n:NTerm _ ')'
    / 'nth-of-type(' _ n:NTerm _ ')'
    / 'nth-last-of-type(' _ n:NTerm _ ')'
    / 'first-child'
    / 'last-child'
    / 'first-of-type'
    / 'last-of-type'
    / 'only-child'
    / 'only-of-type'
    / 'empty'
    / 'link'
    / 'visited'
    / 'active'
    / 'hover'
    / 'focus'
    / 'target'
    / 'lang(' Symbol ')'
    / 'enabled'
    / 'disabled'
    / 'checked'
    / 'not(' _ sel:Chunk _ ')' { return 'not(' + sel + ')'; }

DoublePseudo
    = 'first-line'
    / 'first-letter'
    / 'before'
    / 'after'

NTerm
    = Formula
    / 'odd'
    / 'even'
    / integer

Formula
    = a:integer 'n' plus:('+' b:integer)? {
        return (a + 'n+') + (plus ? b : '0');
    }

Block
    = '{' _ body:BlockInner* '}' _ {
        return body;
    }

TopLevel
    = Assignment
    / Rule

BlockInner
    = TopLevel
    / Pair
    
Pair
    = prop:Property ':' _ values:Value+ ';' _ {
        return A.pair(prop, values)
    }

Property
    = name:[a-zA-Z-]+ _ {
        return name.join('');
    }

Assignment
    = variable:Variable _ ':' _ values:Value+ ';' _ {
        return A.assignment(variable, values);
    }

/*
 * TODO: string, URL, function call, expression
 */
Value
    = n:Number u:Unit {
        return A.value(n, u);
    }
    / Number
    / Symbol
    / String
    / ',' _
    / Variable

Number
    = Float
    / Integer

Integer
    = v:integer { return parseInt(v, 10); }

Float
    = v:float { return parseFloat(v); }
    
Unit
    = 'cm'
    / 'mm'
    / 'in'
    / 'pt'
    / 'px'
    / 'pc'
    / 'deg'
    / 'rad'

Symbol
    = head:[a-zA-Z-] tail:[a-zA-Z0-9_-]* {
        return head + tail.join('');
    }

Variable
    = '$' head:[a-zA-Z_] tail:[a-zA-Z9-9_]* {
        return A.variable(head + tail.join(''));
    }

/* TODO: decode/handle escapes */
String
    = '"' ch:[^"]* '"' {
        return A.string(ch.join(''));
    }
    / "'" ch:[^']+ "'" {
        return A.string(ch.join(''));
    }