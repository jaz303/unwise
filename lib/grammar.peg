{
    var A = require('./ast');
}

/*
 * Entry
 */

Start
    = _ rules:(Rule)* {
        return A.rules(rules);
    }

/*
 * Helpers
 */

_
    = [ \t\r\n]*

non_zero_digit
    = [1-9]

digit
    = [0-9]

number
    = float
    / integer

float
    = rhead:non_zero_digit rtail:digit* '.' ftail:digit+ {
        return parseFloat(head + rtail.join('') + '.' + ftail.join(''));
    }

integer
    = head:non_zero_digit tail:digit* {
        return parseInt(head + tail.join(''), 10);
    }

/*
 * Productions
 */

Rule
    = sel:Selector body:Block {
        return A.rule(sel, body);
    }

Selector
    = el:Element _ {
        return [el];
    }

Chunk
    = el:Element _ {

    }

Combinator
    = '>'   { return ' > '; }
    / '~'   { return ' ~ '; }
    / '+'   { return ' + '; }

Attrib
    = '[' _ AttributeName _ AttributeOperator _ AttributeValue _ ']'
    / '[' _ AttributeName _ ']'

AttributeName
    = Symbol

AttributeOperator
    = '='
    / '~='
    / '^='
    / '$='
    / '*='
    / '|='

AttributeValue
    = Symbol

SinglePseudo
    = 'root'
    / 'nth-child(' _ n:NTerm _ ')'
    / 'nth-last-child(' _ n:NTerm _ ')'
    / 'nth-of-type(' _ n:NTerm _ ')'
    / 'nth-last-of-type(' _ n:NTerm _ ')'
    / 'first-child'
    / 'last-child'
    / 'first-of-type'
    / 'last-of-type'
    / 'only-child'
    / 'only-of-type'
    / 'empty'
    / 'link'
    / 'visited'
    / 'active'
    / 'hover'
    / 'focus'
    / 'target'
    / 'lang(' Symbol ')'
    / 'enabled'
    / 'disabled'
    / 'checked'

DoublePseudo
    = 'first-line'
    / 'first-letter'
    / 'before'
    / 'after'

NTerm
    = integer

Element
    = head:[a-zA-Z] tail:[a-zA-Z0-9-]* {
        return head + tail.join('');
    }

Block
    = '{' _ body:BlockInner* '}' _ {
        return body;
    }

BlockInner
    = Rule
    / Pair

Pair
    = prop:Property ':' _ values:Value+ ';' _ {
        return A.pair(prop, values)
    }

Property
    = name:[a-zA-Z-]+ _ {
        return name.join('');
    }

/*
 * TODO: string, URL, function call, expression
 */
Value
    = NumberWithUnits
    / Number
    / Symbol
    / ',' _
    / Variable


NumberWithUnits
    = number:number unit:Unit {
        return A.value(number, unit);
    }

Number
    = number:number {
        return number;
    }

Unit
    = 'cm'
    / 'mm'
    / 'in'
    / 'pt'
    / 'px'
    / 'pc'
    / 'deg'
    / 'rad'

Symbol
    = sym:[a-zA-Z-]+ _ {
        return sym.join('');
    }

Variable
    = '$' head:[a-zA-Z_] tail:[a-zA-Z9-9_]* {
        return A.variable(head + tail.join(''));
    }
